{"ast":null,"code":"import _objectSpread from \"/Users/p0s00zi/__personal/extra/whatsapp-BigQuiz/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/p0s00zi/__personal/extra/whatsapp-BigQuiz/src/components/MessageViewer/MessageViewer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Message from '../Message/Message';\nimport * as S from './style';\nimport { authorColors } from '../../utils/colors';\n\nconst MessageViewer = ({\n  messages,\n  limit\n}) => {\n  //console.log('In MessageViewer');\n  const participants = Array.from(new Set(messages.map(({\n    author\n  }) => author))).filter(author => author !== 'System');\n  const activeUser = participants[1];\n  const colorMap = participants.reduce((obj, participant, i) => {\n    return _objectSpread({}, obj, {\n      [participant]: authorColors[i % authorColors.length]\n    });\n  }, {});\n  const renderedMessages = messages.slice(0, limit);\n  const isLimited = renderedMessages.length !== messages.length;\n  return React.createElement(S.Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, messages.length > 0 && React.createElement(S.P, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(S.Info, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Showing \", isLimited ? 'first' : 'all', \" \", renderedMessages.length, ' ', \"messages \", isLimited && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"(out of \", messages.length, \")\"))), React.createElement(S.List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, renderedMessages.map((message, i, arr) => {\n    const prevMessage = arr[i - 1];\n    return React.createElement(Message, {\n      key: i // eslint-disable-line react/no-array-index-key\n      ,\n      message: message,\n      color: colorMap[message.author],\n      isActiveUser: activeUser === message.author,\n      isQuestion: message.isQuestion,\n      hasAttachment: message.hasAttachment,\n      sameAuthorAsPrevious: prevMessage && prevMessage.author === message.author,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  })));\n};\n\nMessageViewer.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.instanceOf(Date),\n    author: PropTypes.string,\n    message: PropTypes.string,\n    isQuestion: PropTypes.bool,\n    hasAttachment: PropTypes.bool\n  })).isRequired,\n  limit: PropTypes.number\n};\nMessageViewer.defaultProps = {\n  limit: Infinity\n};\nexport default React.memo(MessageViewer);","map":{"version":3,"sources":["/Users/p0s00zi/__personal/extra/whatsapp-BigQuiz/src/components/MessageViewer/MessageViewer.js"],"names":["React","PropTypes","Message","S","authorColors","MessageViewer","messages","limit","participants","Array","from","Set","map","author","filter","activeUser","colorMap","reduce","obj","participant","i","length","renderedMessages","slice","isLimited","message","arr","prevMessage","isQuestion","hasAttachment","propTypes","arrayOf","shape","date","instanceOf","Date","string","bool","isRequired","number","defaultProps","Infinity","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Message from '../Message/Message';\nimport * as S from './style';\n\nimport { authorColors } from '../../utils/colors';\n\nconst MessageViewer = ({ messages, limit }) => {\n  //console.log('In MessageViewer');\n  const participants = Array.from(\n    new Set(messages.map(({ author }) => author)),\n  ).filter(author => author !== 'System');\n  const activeUser = participants[1];\n  const colorMap = participants.reduce((obj, participant, i) => {\n    return { ...obj, [participant]: authorColors[i % authorColors.length] };\n  }, {});\n  const renderedMessages = messages.slice(0, limit);\n  const isLimited = renderedMessages.length !== messages.length;\n\n  return (\n    <S.Container>\n      {messages.length > 0 && (\n        <S.P>\n          <S.Info>\n            Showing {isLimited ? 'first' : 'all'} {renderedMessages.length}{' '}\n            messages {isLimited && <span>(out of {messages.length})</span>}\n          </S.Info>\n        </S.P>\n      )}\n\n      <S.List>\n        {renderedMessages.map((message, i, arr) => {\n          const prevMessage = arr[i - 1];\n\n          return (\n            <Message\n              key={i} // eslint-disable-line react/no-array-index-key\n              message={message}\n              color={colorMap[message.author]}\n              isActiveUser={activeUser === message.author}\n              isQuestion={message.isQuestion}\n              hasAttachment={message.hasAttachment}\n              sameAuthorAsPrevious={\n                prevMessage && prevMessage.author === message.author\n              }\n            />\n          );\n        })}\n      </S.List>\n    </S.Container>\n  );\n};\n\nMessageViewer.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.instanceOf(Date),\n      author: PropTypes.string,\n      message: PropTypes.string,\n      isQuestion: PropTypes.bool,\n      hasAttachment: PropTypes.bool\n    }),\n  ).isRequired,\n  limit: PropTypes.number,\n};\n\nMessageViewer.defaultProps = {\n  limit: Infinity,\n};\n\nexport default React.memo(MessageViewer);\n"]},"metadata":{},"sourceType":"module"}