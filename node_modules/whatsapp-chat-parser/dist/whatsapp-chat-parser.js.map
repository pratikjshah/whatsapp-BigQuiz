{"version":3,"file":"whatsapp-chat-parser.js","sources":["../src/utils.js","../src/date.js","../src/time.js","../src/parser.js","../src/index.js"],"sourcesContent":["/**\n * Checks that an item at a certain index of an array is greater than a certain\n * value\n */\nfunction indexAboveValue(index, value) {\n  return array => array[index] > value;\n}\n\n/**\n * Returns true for a negative number, false otherwise\n * 0 is considered positive\n */\nfunction isNegative(number) {\n  return number < 0;\n}\n\n/**\n * Given an array of arrays and an index, gropus the inner arrays by the value\n * at the index provided\n * See test cases for a better understanding of this function\n */\nfunction groupArrayByValueAtIndex(array, index) {\n  return Object.values(\n    array.reduce((obj, item) => {\n      /**\n       * Keys that are only numbers get sorted when using Object.values()\n       * Adding a prefix avoids this issue\n       */\n      const key = `key_${item[index]}`;\n\n      if (!obj[key]) {\n        obj[key] = [];\n      }\n\n      obj[key].push(item);\n\n      return obj;\n    }, {}),\n  );\n}\n\nmodule.exports = { indexAboveValue, isNegative, groupArrayByValueAtIndex };\n","const {\n  indexAboveValue,\n  isNegative,\n  groupArrayByValueAtIndex,\n} = require('./utils.js');\n\n/**\n * Takes an array of numeric dates and tries to understand if the days come\n * before the month or the other way around by checking if numbers go above 12\n *\n * Output is true if days are first, false if they are second, or null if it\n * failed to understand the order\n */\nfunction checkAbove12(numericDates) {\n  const daysFirst = numericDates.some(indexAboveValue(0, 12));\n\n  if (daysFirst) {\n    return true;\n  }\n\n  const daysSecond = numericDates.some(indexAboveValue(1, 12));\n\n  if (daysSecond) {\n    return false;\n  }\n\n  return null;\n}\n\n/**\n * Takes an array of numeric dates and tries to understand if the days come\n * before the month or the other way around by checking if a set of numbers\n * during the same year decrease at some point\n * If it does it's probably the days since months can only increase in a given\n * year\n *\n * Output is true if days are first, false if they are second, or null if it\n * failed to understand the order\n */\nfunction checkDecreasing(numericDates) {\n  const datesByYear = groupArrayByValueAtIndex(numericDates, 2);\n  const results = datesByYear.map(dates => {\n    const daysFirst = dates.slice(1).some((date, i) => {\n      const [first1] = dates[i];\n      const [first2] = date;\n\n      return isNegative(first2 - first1);\n    });\n\n    if (daysFirst) {\n      return true;\n    }\n\n    const daysSecond = dates.slice(1).some((date, i) => {\n      const [, second1] = dates[i];\n      const [, second2] = date;\n\n      return isNegative(second2 - second1);\n    });\n\n    if (daysSecond) {\n      return false;\n    }\n\n    return null;\n  });\n\n  const anyTrue = results.some(value => value === true);\n\n  if (anyTrue) {\n    return true;\n  }\n\n  const anyFalse = results.some(value => value === false);\n\n  if (anyFalse) {\n    return false;\n  }\n\n  return null;\n}\n\n/**\n * Takes an array of numeric dates and tries to understand if the days come\n * before the month or the other way around by looking at which number changes\n * more frequently\n *\n * Output is true if days are first, false if they are second, or null if it\n * failed to understand the order\n */\nfunction changeFrequencyAnalysis(numericDates) {\n  const diffs = numericDates\n    .slice(1)\n    .map((date, i) => date.map((num, j) => Math.abs(numericDates[i][j] - num)));\n  const [first, second] = diffs.reduce(\n    (total, diff) => {\n      const [first1, second1] = total;\n      const [first2, second2] = diff;\n\n      return [first1 + first2, second1 + second2];\n    },\n    [0, 0],\n  );\n\n  if (first > second) {\n    return true;\n  }\n\n  if (first < second) {\n    return false;\n  }\n\n  return null;\n}\n\n/**\n * Takes an array of numeric dates and tries to understand if the days come\n * before the month or the other way around by running the dates through all\n * checks (checkAbove12, checkDecreasing, changeFrequencyAnalysis)\n *\n * Output is true if days are first, false if they are second, or null if it\n * failed to understand the order\n */\nfunction daysBeforeMonths(numericDates) {\n  const firstCheck = checkAbove12(numericDates);\n\n  if (firstCheck !== null) {\n    return firstCheck;\n  }\n\n  const secondCheck = checkDecreasing(numericDates);\n\n  if (secondCheck !== null) {\n    return secondCheck;\n  }\n\n  return changeFrequencyAnalysis(numericDates);\n}\n\n/**\n * Takes year, month and day as strings and pads them as needed\n */\nfunction normalizeDate(year, month, day) {\n  return [\n    year.padStart(4, '2000'),\n    month.padStart(2, '0'),\n    day.padStart(2, '0'),\n  ];\n}\n\nmodule.exports = {\n  checkAbove12,\n  checkDecreasing,\n  changeFrequencyAnalysis,\n  daysBeforeMonths,\n  normalizeDate,\n};\n","const regexSplitTime = /[:.]/;\n\n/**\n * Converts time from 12 hour format to 24 hour format\n * From: https://stackoverflow.com/a/40197728/5303634\n */\nfunction convertTime12to24(time, ampm) {\n  // eslint-disable-next-line prefer-const\n  let [hours, minutes, seconds] = time.split(regexSplitTime);\n\n  if (hours === '12') {\n    hours = '00';\n  }\n\n  if (ampm === 'PM') {\n    hours = parseInt(hours, 10) + 12;\n  }\n\n  return `${hours}:${minutes}${seconds ? `:${seconds}` : ''}`;\n}\n\n/**\n * Normalizes a time string to have the following format: hh:mm:ss\n */\nfunction normalizeTime(time) {\n  const [hours, minutes, seconds] = time.split(regexSplitTime);\n\n  return `${hours.length === 1 ? `0${hours}` : hours}:${minutes}:${seconds ||\n    '00'}`;\n}\n\n/**\n * Normalizes am / a.m. / etc. to AM (uppercase, no other characters)\n */\nfunction normalizeAMPM(ampm) {\n  return ampm.replace(/[^apm]/gi, '').toUpperCase();\n}\n\nmodule.exports = {\n  regexSplitTime,\n  convertTime12to24,\n  normalizeTime,\n  normalizeAMPM,\n};\n","const { daysBeforeMonths, normalizeDate } = require('./date.js');\nconst {\n  regexSplitTime,\n  convertTime12to24,\n  normalizeAMPM,\n  normalizeTime,\n} = require('./time.js');\n\nconst regexParser = /^(?:\\u200E|\\u200F)*\\[?(\\d{1,2}[-/.] ?\\d{1,2}[-/.] ?\\d{2,4})[,.]? \\D*?(\\d{1,2}[.:]\\d{1,2}(?:[.:]\\d{1,2})?)(?: ([ap]\\.? ?m\\.?))?\\]?(?: -|:)? (.+?): ([^]*)/i;\nconst regexParserSystem = /^(?:\\u200E|\\u200F)*\\[?(\\d{1,2}[-/.] ?\\d{1,2}[-/.] ?\\d{2,4})[,.]? \\D*?(\\d{1,2}[.:]\\d{1,2}(?:[.:]\\d{1,2})?)(?: ([ap]\\.? ?m\\.?))?\\]?(?: -|:)? ([^]+)/i;\nconst regexStartsWithDateTime = /^(?:\\u200E|\\u200F)*\\[?(\\d{1,2}[-/.] ?\\d{1,2}[-/.] ?\\d{2,4})[,.]? \\D*?(\\d{1,2}[.:]\\d{1,2}(?:[.:]\\d{1,2})?)(?: ([ap]\\.? ?m\\.?))?\\]?/i;\nconst regexSplitDate = /[-/.] ?/;\n\n/**\n * Given an array of lines, detects the lines that are part of a previous\n * message (multiline messages) and merges them\n * It also labels the system messages\n * The result is an array of messages\n */\nfunction makeArrayOfMessages(lines) {\n  return lines.reduce((acc, line) => {\n    /**\n     * If the line doesn't conform to the regex it's probably part of the\n     * previous message or a \"whatsapp event\"\n     */\n    if (!regexParser.test(line)) {\n      /**\n       * If it doesn't match the first regex but still starts with a datetime\n       * it should be considered a \"whatsapp event\" so it gets labeled \"system\"\n       */\n      if (regexStartsWithDateTime.test(line)) {\n        acc.push({ system: true, msg: line });\n      }\n\n      // Else it's part of the previous message and it should be concatenated\n      else if (typeof acc[acc.length - 1] !== 'undefined') {\n        const prevMessage = acc.pop();\n\n        acc.push({\n          system: prevMessage.system,\n          msg: `${prevMessage.msg}\\n${line}`,\n        });\n      }\n    } else {\n      acc.push({ system: false, msg: line });\n    }\n\n    return acc;\n  }, []);\n}\n\n/**\n * Given an array of messages, parses them and returns an object with the fields\n * date, author, message\n */\nfunction parseMessages(messages, options = { daysFirst: undefined }) {\n  let { daysFirst } = options;\n\n  // Parse messages with regex\n  const parsed = messages.map(obj => {\n    const { system, msg } = obj;\n\n    // If it's a system message another regex should be used to parse it\n    if (system) {\n      const [, date, time, ampm, message] = regexParserSystem.exec(msg);\n\n      return { date, time, ampm: ampm || null, author: 'System', message };\n    }\n\n    const [, date, time, ampm, author, message] = regexParser.exec(msg);\n\n    return { date, time, ampm: ampm || null, author, message };\n  });\n\n  // Understand date format if not supplied (days come first?)\n  if (typeof daysFirst !== 'boolean') {\n    const numericDates = Array.from(\n      new Set(parsed.map(({ date }) => date)),\n      date => date.split(regexSplitDate).map(Number),\n    );\n\n    daysFirst = daysBeforeMonths(numericDates);\n  }\n\n  // Convert date/time in date object, return final object\n  return parsed.map(({ date, time, ampm, author, message }) => {\n    let day;\n    let month;\n    let year;\n\n    if (daysFirst === false) {\n      [month, day, year] = date.split(regexSplitDate);\n    } else {\n      [day, month, year] = date.split(regexSplitDate);\n    }\n\n    [year, month, day] = normalizeDate(year, month, day);\n\n    const [hours, minutes, seconds] = normalizeTime(\n      ampm ? convertTime12to24(time, normalizeAMPM(ampm)) : time,\n    ).split(regexSplitTime);\n\n    return {\n      date: new Date(year, month - 1, day, hours, minutes, seconds),\n      author,\n      message,\n    };\n  });\n}\n\nmodule.exports = {\n  makeArrayOfMessages,\n  parseMessages,\n};\n","const { makeArrayOfMessages, parseMessages } = require('./parser.js');\n\n/**\n * Given a string it will parse its content\n * Returns a promise that will contain the parsed messages\n */\nfunction parseString(string, options) {\n  return Promise.resolve(string)\n    .then(data => data.split('\\n'))\n    .then(makeArrayOfMessages)\n    .then(messages => parseMessages(messages, options));\n}\n\nmodule.exports = { parseString };\n"],"names":["indexAboveValue","index","value","array","isNegative","number","groupArrayByValueAtIndex","Object","values","reduce","obj","item","key","push","require$$0","checkAbove12","numericDates","daysFirst","some","daysSecond","checkDecreasing","datesByYear","results","map","dates","slice","date","i","first1","first2","second1","second2","anyTrue","anyFalse","changeFrequencyAnalysis","diffs","num","j","Math","abs","total","diff","first","second","daysBeforeMonths","firstCheck","secondCheck","normalizeDate","year","month","day","padStart","regexSplitTime","convertTime12to24","time","ampm","split","hours","minutes","seconds","parseInt","normalizeTime","length","normalizeAMPM","replace","toUpperCase","require$$1","regexParser","regexParserSystem","regexStartsWithDateTime","regexSplitDate","makeArrayOfMessages","lines","acc","line","test","system","msg","prevMessage","pop","parseMessages","messages","options","undefined","parsed","exec","message","author","Array","from","Set","Number","Date","parseString","string","Promise","resolve","then","data"],"mappings":"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"}